{"version":3,"sources":["../src/index.js"],"names":["ico2pngs","data","icoView","byteLength","Error","getUint16","type","length","pngs","i","size","getUint32","offset","bmp","Uint8Array","buffer","byteOffset","icon","push","pngData","PNG","encode","width","height","channels","colorDepth","bitsPerPixel"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,QAAMC,OAAO,GAAG,yBAAWD,IAAX,CAAhB;;AAEA,MAAIC,OAAO,CAACC,UAAR,GAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,MAAIF,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqB,IAArB,MAA+B,CAAnC,EAAsC;AACpC,UAAM,IAAID,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,QAAME,IAAI,GAAGJ,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqB,IAArB,CAAb;;AAEA,MAAIC,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,CAA3B,EAA8B;AAC5B,UAAM,IAAIF,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,QAAMG,MAAM,GAAGL,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqB,IAArB,CAAf;;AAEA,MAAIH,OAAO,CAACC,UAAR,GAAqB,IAAI,KAAKI,MAAlC,EAA0C;AACxC,UAAM,IAAIH,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAMI,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,IAAI,GAAGR,OAAO,CAACS,SAAR,CAAkB,IAAI,KAAKF,CAAT,GAAa,CAA/B,EAAkC,IAAlC,CAAb;AACA,UAAMG,MAAM,GAAGV,OAAO,CAACS,SAAR,CAAkB,IAAI,KAAKF,CAAT,GAAa,EAA/B,EAAmC,IAAnC,CAAf;AACA,UAAMI,GAAG,GAAG,wBACV,IAAIC,UAAJ,CAAeZ,OAAO,CAACa,MAAvB,EAA+Bb,OAAO,CAACc,UAAR,GAAqBJ,MAApD,EAA4DF,IAA5D,CADU,EAEV;AAAEO,MAAAA,IAAI,EAAE;AAAR,KAFU,CAAZ;AAKAT,IAAAA,IAAI,CAACU,IAAL,CAAU;AACRC,MAAAA,OAAO,EAAEC,GAAG,CAACC,MAAJ,CAAW;AAClBpB,QAAAA,IAAI,EAAEY,GAAG,CAACZ,IADQ;AAElBqB,QAAAA,KAAK,EAAET,GAAG,CAACS,KAFO;AAGlBC,QAAAA,MAAM,EAAEV,GAAG,CAACU,MAHM;AAIlBC,QAAAA,QAAQ,EAAEX,GAAG,CAACY,UAAJ,GAAiB;AAJT,OAAX,CADD;AAORH,MAAAA,KAAK,EAAET,GAAG,CAACS,KAPH;AAQRC,MAAAA,MAAM,EAAEV,GAAG,CAACU,MARJ;AASRG,MAAAA,YAAY,EAAEb,GAAG,CAACY;AATV,KAAV;AAWD;;AAED,SAAOjB,IAAP;AACD","sourcesContent":["import toDataView from \"to-data-view\"\nimport decodeBmp from \"decode-bmp\"\nimport * as PNG from \"fast-png\"\n\nexport function ico2pngs(data) {\n  const icoView = toDataView(data)\n\n  if (icoView.byteLength < 6) {\n    throw new Error(\"Truncated header\")\n  }\n\n  if (icoView.getUint16(0, true) !== 0) {\n    throw new Error(\"Invalid magic bytes\")\n  }\n\n  const type = icoView.getUint16(2, true)\n\n  if (type !== 1 && type !== 2) {\n    throw new Error(\"Invalid image type\")\n  }\n\n  const length = icoView.getUint16(4, true)\n\n  if (icoView.byteLength < 6 + 16 * length) {\n    throw new Error(\"Truncated image list\")\n  }\n\n  const pngs = []\n\n  for (let i = 0; i < length; i++) {\n    const size = icoView.getUint32(6 + 16 * i + 8, true)\n    const offset = icoView.getUint32(6 + 16 * i + 12, true)\n    const bmp = decodeBmp(\n      new Uint8Array(icoView.buffer, icoView.byteOffset + offset, size),\n      { icon: true }\n    )\n\n    pngs.push({\n      pngData: PNG.encode({\n        data: bmp.data,\n        width: bmp.width,\n        height: bmp.height,\n        channels: bmp.colorDepth / 8,\n      }),\n      width: bmp.width,\n      height: bmp.height,\n      bitsPerPixel: bmp.colorDepth,\n    })\n  }\n\n  return pngs\n}\n"],"file":"index.js"}